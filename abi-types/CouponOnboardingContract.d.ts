/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type CouponRedeemed = ContractEventLog<{
  daoAddress: string;
  nonce: string;
  authorizedMember: string;
  amount: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;

export interface CouponOnboardingContract extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): CouponOnboardingContract;
  clone(): CouponOnboardingContract;
  methods: {
    COUPON_MESSAGE_TYPE(): NonPayableTransactionObject<string>;

    COUPON_MESSAGE_TYPEHASH(): NonPayableTransactionObject<string>;

    EIP712_DOMAIN(): NonPayableTransactionObject<string>;

    EIP712_DOMAIN_TYPEHASH(): NonPayableTransactionObject<string>;

    domainSeparator(
      dao: string,
      chainId: number | string | BN,
      actionId: string
    ): NonPayableTransactionObject<string>;

    hashMessage(
      dao: string,
      chainId: number | string | BN,
      actionId: string,
      message: string | number[]
    ): NonPayableTransactionObject<string>;

    isValidSignature(
      signer: string,
      hash: string | number[],
      sig: string | number[]
    ): NonPayableTransactionObject<boolean>;

    configureDao(
      dao: string,
      signerAddress: string,
      erc20: string,
      tokenAddrToMint: string,
      maxAmount: number | string | BN,
      chainId: number | string | BN
    ): NonPayableTransactionObject<void>;

    hashCouponMessage(
      dao: string,
      coupon: [string, number | string | BN, number | string | BN]
    ): NonPayableTransactionObject<string>;

    redeemCoupon(
      dao: string,
      authorizedMember: string,
      amount: number | string | BN,
      nonce: number | string | BN,
      signature: string | number[]
    ): NonPayableTransactionObject<void>;
  };
  events: {
    CouponRedeemed(cb?: Callback<CouponRedeemed>): EventEmitter;
    CouponRedeemed(
      options?: EventOptions,
      cb?: Callback<CouponRedeemed>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "CouponRedeemed", cb: Callback<CouponRedeemed>): void;
  once(
    event: "CouponRedeemed",
    options: EventOptions,
    cb: Callback<CouponRedeemed>
  ): void;
}
