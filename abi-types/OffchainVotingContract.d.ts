/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type ResultChallenged = ContractEventLog<{
  daoAddress: string;
  proposalId: string;
  resultRoot: string;
  0: string;
  1: string;
  2: string;
}>;
export type VoteResultSubmitted = ContractEventLog<{
  daoAddress: string;
  proposalId: string;
  nbNo: string;
  nbYes: string;
  resultRoot: string;
  memberAddr: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
}>;

export interface OffchainVotingContract extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): OffchainVotingContract;
  clone(): OffchainVotingContract;
  methods: {
    isActiveMember(
      dao: string,
      _addr: string
    ): NonPayableTransactionObject<boolean>;

    ovHash(): NonPayableTransactionObject<string>;

    owner(): NonPayableTransactionObject<string>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    votes(
      arg0: string,
      arg1: string | number[]
    ): NonPayableTransactionObject<{
      snapshot: string;
      reporter: string;
      resultRoot: string;
      nbYes: string;
      nbNo: string;
      startingTime: string;
      gracePeriodStartingTime: string;
      isChallenged: boolean;
      stepRequested: string;
      forceFailed: boolean;
      fallbackVotesCount: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: string;
      7: boolean;
      8: string;
      9: boolean;
      10: string;
    }>;

    adminFailProposal(
      dao: string,
      proposalId: string | number[]
    ): NonPayableTransactionObject<void>;

    getAdapterName(): NonPayableTransactionObject<string>;

    getChallengeDetails(
      dao: string,
      proposalId: string | number[]
    ): NonPayableTransactionObject<{
      0: string;
      1: string;
    }>;

    configureDao(
      dao: string,
      votingPeriod: number | string | BN,
      gracePeriod: number | string | BN,
      fallbackThreshold: number | string | BN
    ): NonPayableTransactionObject<void>;

    submitVoteResult(
      dao: string,
      proposalId: string | number[],
      resultRoot: string | number[],
      reporter: string,
      result: [
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        string | number[],
        string | number[],
        (string | number[])[]
      ],
      rootSig: string | number[]
    ): NonPayableTransactionObject<void>;

    requestStep(
      dao: string,
      proposalId: string | number[],
      index: number | string | BN
    ): NonPayableTransactionObject<void>;

    challengeMissingStep(
      dao: string,
      proposalId: string | number[]
    ): NonPayableTransactionObject<void>;

    provideStep(
      dao: string,
      adapterAddress: string,
      node: [
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        string | number[],
        string | number[],
        (string | number[])[]
      ]
    ): NonPayableTransactionObject<void>;

    getSenderAddress(
      dao: string,
      actionId: string,
      data: string | number[],
      arg3: string
    ): NonPayableTransactionObject<string>;

    startNewVotingForProposal(
      dao: string,
      proposalId: string | number[],
      data: string | number[]
    ): NonPayableTransactionObject<void>;

    voteResult(
      dao: string,
      proposalId: string | number[]
    ): NonPayableTransactionObject<string>;

    challengeBadFirstNode(
      dao: string,
      proposalId: string | number[],
      node: [
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        string | number[],
        string | number[],
        (string | number[])[]
      ]
    ): NonPayableTransactionObject<void>;

    challengeBadNode(
      dao: string,
      proposalId: string | number[],
      node: [
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        string | number[],
        string | number[],
        (string | number[])[]
      ]
    ): NonPayableTransactionObject<void>;

    getBadNodeError(
      dao: string,
      proposalId: string | number[],
      submitNewVote: boolean,
      resultRoot: string | number[],
      blockNumber: number | string | BN,
      gracePeriodStartingTime: number | string | BN,
      nbMembers: number | string | BN,
      node: [
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        string | number[],
        string | number[],
        (string | number[])[]
      ]
    ): NonPayableTransactionObject<string>;

    challengeBadStep(
      dao: string,
      proposalId: string | number[],
      nodePrevious: [
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        string | number[],
        string | number[],
        (string | number[])[]
      ],
      nodeCurrent: [
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        string | number[],
        string | number[],
        (string | number[])[]
      ]
    ): NonPayableTransactionObject<void>;

    requestFallback(
      dao: string,
      proposalId: string | number[]
    ): NonPayableTransactionObject<void>;

    sponsorChallengeProposal(
      dao: string,
      proposalId: string | number[],
      sponsoredBy: string
    ): NonPayableTransactionObject<void>;

    processChallengeProposal(
      dao: string,
      proposalId: string | number[]
    ): NonPayableTransactionObject<void>;
  };
  events: {
    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    ResultChallenged(cb?: Callback<ResultChallenged>): EventEmitter;
    ResultChallenged(
      options?: EventOptions,
      cb?: Callback<ResultChallenged>
    ): EventEmitter;

    VoteResultSubmitted(cb?: Callback<VoteResultSubmitted>): EventEmitter;
    VoteResultSubmitted(
      options?: EventOptions,
      cb?: Callback<VoteResultSubmitted>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "ResultChallenged", cb: Callback<ResultChallenged>): void;
  once(
    event: "ResultChallenged",
    options: EventOptions,
    cb: Callback<ResultChallenged>
  ): void;

  once(event: "VoteResultSubmitted", cb: Callback<VoteResultSubmitted>): void;
  once(
    event: "VoteResultSubmitted",
    options: EventOptions,
    cb: Callback<VoteResultSubmitted>
  ): void;
}
