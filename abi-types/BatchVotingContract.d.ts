/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type NewVoteResult = ContractEventLog<{
  dao: string;
  actionId: string;
  nbYes: string;
  nbNo: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;

export interface BatchVotingContract extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): BatchVotingContract;
  clone(): BatchVotingContract;
  methods: {
    ADAPTER_NAME(): NonPayableTransactionObject<string>;

    EIP712_DOMAIN(): NonPayableTransactionObject<string>;

    EIP712_DOMAIN_TYPEHASH(): NonPayableTransactionObject<string>;

    domainSeparator(
      dao: string,
      chainId: number | string | BN,
      actionId: string
    ): NonPayableTransactionObject<string>;

    getFlag(
      flags: number | string | BN,
      flag: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    hashMessage(
      dao: string,
      chainId: number | string | BN,
      actionId: string,
      message: string | number[]
    ): NonPayableTransactionObject<string>;

    isActiveMember(
      dao: string,
      _addr: string
    ): NonPayableTransactionObject<boolean>;

    isNotReservedAddress(addr: string): NonPayableTransactionObject<boolean>;

    isNotZeroAddress(addr: string): NonPayableTransactionObject<boolean>;

    recover(
      hash: string | number[],
      sig: string | number[]
    ): NonPayableTransactionObject<string>;

    setFlag(
      flags: number | string | BN,
      flag: number | string | BN,
      value: boolean
    ): NonPayableTransactionObject<string>;

    votingSessions(
      arg0: string,
      arg1: string | number[]
    ): NonPayableTransactionObject<{
      snapshot: string;
      nbYes: string;
      nbNo: string;
      actionId: string;
      proposalHash: string;
      startingTime: string;
      gracePeriodStartingTime: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: string;
    }>;

    configureDao(
      dao: string,
      votingPeriod: number | string | BN,
      gracePeriod: number | string | BN
    ): NonPayableTransactionObject<void>;

    submitVoteResult(
      dao: string,
      proposalId: string | number[],
      votes: [
        [number | string | BN, [number | string | BN, string | number[]]],
        string,
        string | number[]
      ][]
    ): NonPayableTransactionObject<void>;

    getAdapterName(): NonPayableTransactionObject<string>;

    processVotes(
      dao: string,
      proposalId: string | number[],
      entries: [
        [number | string | BN, [number | string | BN, string | number[]]],
        string,
        string | number[]
      ][]
    ): NonPayableTransactionObject<{
      nbYes: string;
      nbNo: string;
      0: string;
      1: string;
    }>;

    validateVote(
      dao: string,
      bank: string,
      actionId: string,
      snapshot: number | string | BN,
      proposalId: string | number[],
      previousAddress: string,
      entry: [
        [number | string | BN, [number | string | BN, string | number[]]],
        string,
        string | number[]
      ]
    ): NonPayableTransactionObject<string>;

    getSenderAddress(
      dao: string,
      actionId: string,
      data: string | number[],
      arg3: string
    ): NonPayableTransactionObject<string>;

    startNewVotingForProposal(
      dao: string,
      proposalId: string | number[],
      data: string | number[]
    ): NonPayableTransactionObject<void>;

    voteResult(
      dao: string,
      proposalId: string | number[]
    ): NonPayableTransactionObject<string>;
  };
  events: {
    NewVoteResult(cb?: Callback<NewVoteResult>): EventEmitter;
    NewVoteResult(
      options?: EventOptions,
      cb?: Callback<NewVoteResult>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "NewVoteResult", cb: Callback<NewVoteResult>): void;
  once(
    event: "NewVoteResult",
    options: EventOptions,
    cb: Callback<NewVoteResult>
  ): void;
}
