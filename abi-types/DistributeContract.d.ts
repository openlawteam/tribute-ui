/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Distributed = ContractEventLog<{
  daoAddress: string;
  token: string;
  amount: string;
  unitHolder: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;

export interface DistributeContract extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): DistributeContract;
  clone(): DistributeContract;
  methods: {
    distributions(
      arg0: string,
      arg1: string | number[]
    ): NonPayableTransactionObject<{
      token: string;
      amount: string;
      unitHolderAddr: string;
      status: string;
      currentIndex: string;
      blockNumber: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
    }>;

    ongoingDistributions(arg0: string): NonPayableTransactionObject<string>;

    submitProposal(
      dao: string,
      proposalId: string | number[],
      unitHolderAddr: string,
      token: string,
      amount: number | string | BN,
      data: string | number[]
    ): NonPayableTransactionObject<void>;

    processProposal(
      dao: string,
      proposalId: string | number[]
    ): NonPayableTransactionObject<void>;

    distribute(
      dao: string,
      toIndex: number | string | BN
    ): NonPayableTransactionObject<void>;
  };
  events: {
    Distributed(cb?: Callback<Distributed>): EventEmitter;
    Distributed(
      options?: EventOptions,
      cb?: Callback<Distributed>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Distributed", cb: Callback<Distributed>): void;
  once(
    event: "Distributed",
    options: EventOptions,
    cb: Callback<Distributed>
  ): void;
}
