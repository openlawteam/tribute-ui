/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type DAOCreated = ContractEventLog<{
  _address: string;
  _name: string;
  0: string;
  1: string;
}>;

export interface DaoFactory extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): DaoFactory;
  clone(): DaoFactory;
  methods: {
    addresses(arg0: string | number[]): NonPayableTransactionObject<string>;

    daos(arg0: string): NonPayableTransactionObject<string>;

    identityAddress(): NonPayableTransactionObject<string>;

    createDao(
      daoName: string,
      creator: string
    ): NonPayableTransactionObject<void>;

    getDaoAddress(daoName: string): NonPayableTransactionObject<string>;

    addAdapters(
      dao: string,
      adapters: [string | number[], string, number | string | BN][]
    ): NonPayableTransactionObject<void>;

    configureExtension(
      dao: string,
      extension: string,
      adapters: [string | number[], string, number | string | BN][]
    ): NonPayableTransactionObject<void>;

    updateAdapter(
      dao: string,
      adapter: [string | number[], string, number | string | BN]
    ): NonPayableTransactionObject<void>;
  };
  events: {
    DAOCreated(cb?: Callback<DAOCreated>): EventEmitter;
    DAOCreated(options?: EventOptions, cb?: Callback<DAOCreated>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "DAOCreated", cb: Callback<DAOCreated>): void;
  once(
    event: "DAOCreated",
    options: EventOptions,
    cb: Callback<DAOCreated>
  ): void;
}
