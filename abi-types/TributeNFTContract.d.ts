/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export interface TributeNFTContract extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): TributeNFTContract;
  clone(): TributeNFTContract;
  methods: {
    proposals(
      arg0: string,
      arg1: string | number[]
    ): NonPayableTransactionObject<{
      id: string;
      applicant: string;
      nftAddr: string;
      nftTokenId: string;
      requestAmount: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
    }>;

    configureDao(
      dao: string,
      tokenAddrToMint: string
    ): NonPayableTransactionObject<void>;

    submitProposal(
      dao: string,
      proposalId: string | number[],
      applicant: string,
      nftAddr: string,
      nftTokenId: number | string | BN,
      requestAmount: number | string | BN,
      data: string | number[]
    ): NonPayableTransactionObject<void>;

    onERC1155Received(
      arg0: string,
      from: string,
      id: number | string | BN,
      value: number | string | BN,
      data: string | number[]
    ): NonPayableTransactionObject<string>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: (number | string | BN)[],
      arg3: (number | string | BN)[],
      arg4: string | number[]
    ): NonPayableTransactionObject<string>;

    supportsInterface(
      interfaceID: string | number[]
    ): NonPayableTransactionObject<boolean>;

    onERC721Received(
      arg0: string,
      from: string,
      tokenId: number | string | BN,
      data: string | number[]
    ): NonPayableTransactionObject<string>;
  };
  events: {
    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };
}
