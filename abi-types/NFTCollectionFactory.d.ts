/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type NFTCollectionCreated = ContractEventLog<{
  daoAddress: string;
  extensionAddress: string;
  0: string;
  1: string;
}>;

export interface NFTCollectionFactory extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): NFTCollectionFactory;
  clone(): NFTCollectionFactory;
  methods: {
    identityAddress(): NonPayableTransactionObject<string>;

    create(dao: string): NonPayableTransactionObject<void>;

    getExtensionAddress(dao: string): NonPayableTransactionObject<string>;
  };
  events: {
    NFTCollectionCreated(cb?: Callback<NFTCollectionCreated>): EventEmitter;
    NFTCollectionCreated(
      options?: EventOptions,
      cb?: Callback<NFTCollectionCreated>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "NFTCollectionCreated", cb: Callback<NFTCollectionCreated>): void;
  once(
    event: "NFTCollectionCreated",
    options: EventOptions,
    cb: Callback<NFTCollectionCreated>
  ): void;
}
