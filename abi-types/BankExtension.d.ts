/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type NewBalance = ContractEventLog<{
  member: string;
  tokenAddr: string;
  amount: string;
  0: string;
  1: string;
  2: string;
}>;
export type Withdraw = ContractEventLog<{
  account: string;
  tokenAddr: string;
  amount: string;
  0: string;
  1: string;
  2: string;
}>;

export interface BankExtension extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): BankExtension;
  clone(): BankExtension;
  methods: {
    availableInternalTokens(arg0: string): NonPayableTransactionObject<boolean>;

    availableTokens(arg0: string): NonPayableTransactionObject<boolean>;

    checkpoints(
      arg0: string,
      arg1: string,
      arg2: number | string | BN
    ): NonPayableTransactionObject<{
      fromBlock: string;
      amount: string;
      0: string;
      1: string;
    }>;

    dao(): NonPayableTransactionObject<string>;

    initialized(): NonPayableTransactionObject<boolean>;

    internalTokens(
      arg0: number | string | BN
    ): NonPayableTransactionObject<string>;

    maxExternalTokens(): NonPayableTransactionObject<string>;

    numCheckpoints(
      arg0: string,
      arg1: string
    ): NonPayableTransactionObject<string>;

    tokens(arg0: number | string | BN): NonPayableTransactionObject<string>;

    initialize(
      _dao: string,
      creator: string
    ): NonPayableTransactionObject<void>;

    withdraw(
      member: string,
      tokenAddr: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    isInternalToken(token: string): NonPayableTransactionObject<boolean>;

    isTokenAllowed(token: string): NonPayableTransactionObject<boolean>;

    setMaxExternalTokens(
      maxTokens: number | string | BN
    ): NonPayableTransactionObject<void>;

    registerPotentialNewToken(token: string): NonPayableTransactionObject<void>;

    registerPotentialNewInternalToken(
      token: string
    ): NonPayableTransactionObject<void>;

    updateToken(tokenAddr: string): NonPayableTransactionObject<void>;

    getToken(index: number | string | BN): NonPayableTransactionObject<string>;

    nbTokens(): NonPayableTransactionObject<string>;

    getTokens(): NonPayableTransactionObject<string[]>;

    getInternalToken(
      index: number | string | BN
    ): NonPayableTransactionObject<string>;

    nbInternalTokens(): NonPayableTransactionObject<string>;

    addToBalance(
      member: string,
      token: string,
      amount: number | string | BN
    ): PayableTransactionObject<void>;

    subtractFromBalance(
      member: string,
      token: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    internalTransfer(
      from: string,
      to: string,
      token: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    balanceOf(
      member: string,
      tokenAddr: string
    ): NonPayableTransactionObject<string>;

    getPriorAmount(
      account: string,
      tokenAddr: string,
      blockNumber: number | string | BN
    ): NonPayableTransactionObject<string>;
  };
  events: {
    NewBalance(cb?: Callback<NewBalance>): EventEmitter;
    NewBalance(options?: EventOptions, cb?: Callback<NewBalance>): EventEmitter;

    Withdraw(cb?: Callback<Withdraw>): EventEmitter;
    Withdraw(options?: EventOptions, cb?: Callback<Withdraw>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "NewBalance", cb: Callback<NewBalance>): void;
  once(
    event: "NewBalance",
    options: EventOptions,
    cb: Callback<NewBalance>
  ): void;

  once(event: "Withdraw", cb: Callback<Withdraw>): void;
  once(event: "Withdraw", options: EventOptions, cb: Callback<Withdraw>): void;
}
