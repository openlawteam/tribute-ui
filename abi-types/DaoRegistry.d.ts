/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type AdapterAdded = ContractEventLog<{
  adapterId: string;
  adapterAddress: string;
  flags: string;
  0: string;
  1: string;
  2: string;
}>;
export type AdapterRemoved = ContractEventLog<{
  adapterId: string;
  0: string;
}>;
export type AddressConfigurationUpdated = ContractEventLog<{
  key: string;
  value: string;
  0: string;
  1: string;
}>;
export type ConfigurationUpdated = ContractEventLog<{
  key: string;
  value: string;
  0: string;
  1: string;
}>;
export type ExtensionAdded = ContractEventLog<{
  extensionId: string;
  extensionAddress: string;
  0: string;
  1: string;
}>;
export type ExtensionRemoved = ContractEventLog<{
  extensionId: string;
  0: string;
}>;
export type ProcessedProposal = ContractEventLog<{
  proposalId: string;
  flags: string;
  0: string;
  1: string;
}>;
export type SponsoredProposal = ContractEventLog<{
  proposalId: string;
  flags: string;
  votingAdapter: string;
  0: string;
  1: string;
  2: string;
}>;
export type SubmittedProposal = ContractEventLog<{
  proposalId: string;
  flags: string;
  0: string;
  1: string;
}>;
export type UpdateDelegateKey = ContractEventLog<{
  memberAddress: string;
  newDelegateKey: string;
  0: string;
  1: string;
}>;

export interface DaoRegistry extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): DaoRegistry;
  clone(): DaoRegistry;
  methods: {
    adapters(arg0: string | number[]): NonPayableTransactionObject<string>;

    addressConfiguration(
      arg0: string | number[]
    ): NonPayableTransactionObject<string>;

    extensions(arg0: string | number[]): NonPayableTransactionObject<string>;

    initialized(): NonPayableTransactionObject<boolean>;

    inverseAdapters(arg0: string): NonPayableTransactionObject<{
      id: string;
      acl: string;
      0: string;
      1: string;
    }>;

    inverseExtensions(arg0: string): NonPayableTransactionObject<{
      id: string;
      deleted: boolean;
      0: string;
      1: boolean;
    }>;

    isActiveMember(
      dao: string,
      _addr: string
    ): NonPayableTransactionObject<boolean>;

    lockedAt(): NonPayableTransactionObject<string>;

    mainConfiguration(
      arg0: string | number[]
    ): NonPayableTransactionObject<string>;

    memberAddressesByDelegatedKey(
      arg0: string
    ): NonPayableTransactionObject<string>;

    members(arg0: string): NonPayableTransactionObject<string>;

    proposals(arg0: string | number[]): NonPayableTransactionObject<{
      adapterAddress: string;
      flags: string;
      0: string;
      1: string;
    }>;

    state(): NonPayableTransactionObject<string>;

    votingAdapter(arg0: string | number[]): NonPayableTransactionObject<string>;

    initialize(
      creator: string,
      payer: string
    ): NonPayableTransactionObject<void>;

    finalizeDao(): NonPayableTransactionObject<void>;

    lockSession(): NonPayableTransactionObject<void>;

    unlockSession(): NonPayableTransactionObject<void>;

    setConfiguration(
      key: string | number[],
      value: number | string | BN
    ): NonPayableTransactionObject<void>;

    potentialNewMember(
      memberAddress: string
    ): NonPayableTransactionObject<void>;

    setAddressConfiguration(
      key: string | number[],
      value: string
    ): NonPayableTransactionObject<void>;

    getConfiguration(
      key: string | number[]
    ): NonPayableTransactionObject<string>;

    getAddressConfiguration(
      key: string | number[]
    ): NonPayableTransactionObject<string>;

    setAclToExtensionForAdapter(
      extensionAddress: string,
      adapterAddress: string,
      acl: number | string | BN
    ): NonPayableTransactionObject<void>;

    replaceAdapter(
      adapterId: string | number[],
      adapterAddress: string,
      acl: number | string | BN,
      keys: (string | number[])[],
      values: (number | string | BN)[]
    ): NonPayableTransactionObject<void>;

    addExtension(
      extensionId: string | number[],
      extension: string,
      creator: string
    ): NonPayableTransactionObject<void>;

    removeExtension(
      extensionId: string | number[]
    ): NonPayableTransactionObject<void>;

    isExtension(extensionAddr: string): NonPayableTransactionObject<boolean>;

    isAdapter(adapterAddress: string): NonPayableTransactionObject<boolean>;

    hasAdapterAccess(
      adapterAddress: string,
      flag: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    hasAdapterAccessToExtension(
      adapterAddress: string,
      extensionAddress: string,
      flag: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    getAdapterAddress(
      adapterId: string | number[]
    ): NonPayableTransactionObject<string>;

    getExtensionAddress(
      extensionId: string | number[]
    ): NonPayableTransactionObject<string>;

    submitProposal(
      proposalId: string | number[]
    ): NonPayableTransactionObject<void>;

    sponsorProposal(
      proposalId: string | number[],
      sponsoringMember: string,
      votingAdapterAddr: string
    ): NonPayableTransactionObject<void>;

    processProposal(
      proposalId: string | number[]
    ): NonPayableTransactionObject<void>;

    isMember(addr: string): NonPayableTransactionObject<boolean>;

    getProposalFlag(
      proposalId: string | number[],
      flag: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    getMemberFlag(
      memberAddress: string,
      flag: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    getNbMembers(): NonPayableTransactionObject<string>;

    getMemberAddress(
      index: number | string | BN
    ): NonPayableTransactionObject<string>;

    updateDelegateKey(
      memberAddr: string,
      newDelegateKey: string
    ): NonPayableTransactionObject<void>;

    getAddressIfDelegated(
      checkAddr: string
    ): NonPayableTransactionObject<string>;

    getCurrentDelegateKey(
      memberAddr: string
    ): NonPayableTransactionObject<string>;

    getPreviousDelegateKey(
      memberAddr: string
    ): NonPayableTransactionObject<string>;

    getPriorDelegateKey(
      memberAddr: string,
      blockNumber: number | string | BN
    ): NonPayableTransactionObject<string>;
  };
  events: {
    AdapterAdded(cb?: Callback<AdapterAdded>): EventEmitter;
    AdapterAdded(
      options?: EventOptions,
      cb?: Callback<AdapterAdded>
    ): EventEmitter;

    AdapterRemoved(cb?: Callback<AdapterRemoved>): EventEmitter;
    AdapterRemoved(
      options?: EventOptions,
      cb?: Callback<AdapterRemoved>
    ): EventEmitter;

    AddressConfigurationUpdated(
      cb?: Callback<AddressConfigurationUpdated>
    ): EventEmitter;
    AddressConfigurationUpdated(
      options?: EventOptions,
      cb?: Callback<AddressConfigurationUpdated>
    ): EventEmitter;

    ConfigurationUpdated(cb?: Callback<ConfigurationUpdated>): EventEmitter;
    ConfigurationUpdated(
      options?: EventOptions,
      cb?: Callback<ConfigurationUpdated>
    ): EventEmitter;

    ExtensionAdded(cb?: Callback<ExtensionAdded>): EventEmitter;
    ExtensionAdded(
      options?: EventOptions,
      cb?: Callback<ExtensionAdded>
    ): EventEmitter;

    ExtensionRemoved(cb?: Callback<ExtensionRemoved>): EventEmitter;
    ExtensionRemoved(
      options?: EventOptions,
      cb?: Callback<ExtensionRemoved>
    ): EventEmitter;

    ProcessedProposal(cb?: Callback<ProcessedProposal>): EventEmitter;
    ProcessedProposal(
      options?: EventOptions,
      cb?: Callback<ProcessedProposal>
    ): EventEmitter;

    SponsoredProposal(cb?: Callback<SponsoredProposal>): EventEmitter;
    SponsoredProposal(
      options?: EventOptions,
      cb?: Callback<SponsoredProposal>
    ): EventEmitter;

    SubmittedProposal(cb?: Callback<SubmittedProposal>): EventEmitter;
    SubmittedProposal(
      options?: EventOptions,
      cb?: Callback<SubmittedProposal>
    ): EventEmitter;

    UpdateDelegateKey(cb?: Callback<UpdateDelegateKey>): EventEmitter;
    UpdateDelegateKey(
      options?: EventOptions,
      cb?: Callback<UpdateDelegateKey>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "AdapterAdded", cb: Callback<AdapterAdded>): void;
  once(
    event: "AdapterAdded",
    options: EventOptions,
    cb: Callback<AdapterAdded>
  ): void;

  once(event: "AdapterRemoved", cb: Callback<AdapterRemoved>): void;
  once(
    event: "AdapterRemoved",
    options: EventOptions,
    cb: Callback<AdapterRemoved>
  ): void;

  once(
    event: "AddressConfigurationUpdated",
    cb: Callback<AddressConfigurationUpdated>
  ): void;
  once(
    event: "AddressConfigurationUpdated",
    options: EventOptions,
    cb: Callback<AddressConfigurationUpdated>
  ): void;

  once(event: "ConfigurationUpdated", cb: Callback<ConfigurationUpdated>): void;
  once(
    event: "ConfigurationUpdated",
    options: EventOptions,
    cb: Callback<ConfigurationUpdated>
  ): void;

  once(event: "ExtensionAdded", cb: Callback<ExtensionAdded>): void;
  once(
    event: "ExtensionAdded",
    options: EventOptions,
    cb: Callback<ExtensionAdded>
  ): void;

  once(event: "ExtensionRemoved", cb: Callback<ExtensionRemoved>): void;
  once(
    event: "ExtensionRemoved",
    options: EventOptions,
    cb: Callback<ExtensionRemoved>
  ): void;

  once(event: "ProcessedProposal", cb: Callback<ProcessedProposal>): void;
  once(
    event: "ProcessedProposal",
    options: EventOptions,
    cb: Callback<ProcessedProposal>
  ): void;

  once(event: "SponsoredProposal", cb: Callback<SponsoredProposal>): void;
  once(
    event: "SponsoredProposal",
    options: EventOptions,
    cb: Callback<SponsoredProposal>
  ): void;

  once(event: "SubmittedProposal", cb: Callback<SubmittedProposal>): void;
  once(
    event: "SubmittedProposal",
    options: EventOptions,
    cb: Callback<SubmittedProposal>
  ): void;

  once(event: "UpdateDelegateKey", cb: Callback<UpdateDelegateKey>): void;
  once(
    event: "UpdateDelegateKey",
    options: EventOptions,
    cb: Callback<UpdateDelegateKey>
  ): void;
}
