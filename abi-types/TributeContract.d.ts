/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export interface TributeContract extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): TributeContract;
  clone(): TributeContract;
  methods: {
    proposals(
      arg0: string,
      arg1: string | number[]
    ): NonPayableTransactionObject<{
      id: string;
      applicant: string;
      tokenToMint: string;
      requestAmount: string;
      token: string;
      tributeAmount: string;
      tributeTokenOwner: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: string;
    }>;

    configureDao(
      dao: string,
      tokenAddrToMint: string
    ): NonPayableTransactionObject<void>;

    submitProposal(
      dao: string,
      proposalId: string | number[],
      applicant: string,
      tokenToMint: string,
      requestAmount: number | string | BN,
      tokenAddr: string,
      tributeAmount: number | string | BN,
      tributeTokenOwner: string,
      data: string | number[]
    ): NonPayableTransactionObject<void>;

    processProposal(
      dao: string,
      proposalId: string | number[]
    ): NonPayableTransactionObject<void>;
  };
  events: {
    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };
}
