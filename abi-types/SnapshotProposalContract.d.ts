/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export interface SnapshotProposalContract extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): SnapshotProposalContract;
  clone(): SnapshotProposalContract;
  methods: {
    EIP712_DOMAIN(): NonPayableTransactionObject<string>;

    EIP712_DOMAIN_TYPEHASH(): NonPayableTransactionObject<string>;

    PROPOSAL_MESSAGE_TYPE(): NonPayableTransactionObject<string>;

    PROPOSAL_MESSAGE_TYPEHASH(): NonPayableTransactionObject<string>;

    PROPOSAL_PAYLOAD_TYPE(): NonPayableTransactionObject<string>;

    PROPOSAL_PAYLOAD_TYPEHASH(): NonPayableTransactionObject<string>;

    VOTE_MESSAGE_TYPE(): NonPayableTransactionObject<string>;

    VOTE_MESSAGE_TYPEHASH(): NonPayableTransactionObject<string>;

    VOTE_PAYLOAD_TYPE(): NonPayableTransactionObject<string>;

    VOTE_PAYLOAD_TYPEHASH(): NonPayableTransactionObject<string>;

    chainId(): NonPayableTransactionObject<string>;

    DOMAIN_SEPARATOR(
      dao: string,
      actionId: string
    ): NonPayableTransactionObject<string>;

    hashMessage(
      dao: string,
      actionId: string,
      message: [
        number | string | BN,
        string | number[],
        string,
        [
          string | number[],
          string | number[],
          string[],
          number | string | BN,
          number | string | BN,
          string
        ],
        string | number[]
      ]
    ): NonPayableTransactionObject<string>;

    hashProposalMessage(
      message: [
        number | string | BN,
        string | number[],
        string,
        [
          string | number[],
          string | number[],
          string[],
          number | string | BN,
          number | string | BN,
          string
        ],
        string | number[]
      ]
    ): NonPayableTransactionObject<string>;

    hashProposalPayload(
      payload: [
        string | number[],
        string | number[],
        string[],
        number | string | BN,
        number | string | BN,
        string
      ]
    ): NonPayableTransactionObject<string>;

    hashVote(
      dao: string,
      actionId: string,
      message: [number | string | BN, [number | string | BN, string | number[]]]
    ): NonPayableTransactionObject<string>;

    hashVoteInternal(
      message: [number | string | BN, [number | string | BN, string | number[]]]
    ): NonPayableTransactionObject<string>;

    hashVotePayload(
      payload: [number | string | BN, string | number[]]
    ): NonPayableTransactionObject<string>;
  };
  events: {
    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };
}
