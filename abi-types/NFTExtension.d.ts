/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type CollectedNFT = ContractEventLog<{
  nftAddr: string;
  nftTokenId: string;
  0: string;
  1: string;
}>;
export type TransferredNFT = ContractEventLog<{
  nftAddr: string;
  nftTokenId: string;
  oldOwner: string;
  newOwner: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type WithdrawnNFT = ContractEventLog<{
  nftAddr: string;
  nftTokenId: string;
  toAddress: string;
  0: string;
  1: string;
  2: string;
}>;

export interface NFTExtension extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): NFTExtension;
  clone(): NFTExtension;
  methods: {
    dao(): NonPayableTransactionObject<string>;

    initialized(): NonPayableTransactionObject<boolean>;

    initialize(
      _dao: string,
      creator: string
    ): NonPayableTransactionObject<void>;

    collect(
      nftAddr: string,
      nftTokenId: number | string | BN
    ): NonPayableTransactionObject<void>;

    withdrawNFT(
      newOwner: string,
      nftAddr: string,
      nftTokenId: number | string | BN
    ): NonPayableTransactionObject<void>;

    internalTransfer(
      nftAddr: string,
      nftTokenId: number | string | BN,
      newOwner: string
    ): NonPayableTransactionObject<void>;

    getNFTId(
      nftAddress: string,
      tokenId: number | string | BN
    ): NonPayableTransactionObject<string>;

    nbNFTs(tokenAddr: string): NonPayableTransactionObject<string>;

    getNFT(
      tokenAddr: string,
      index: number | string | BN
    ): NonPayableTransactionObject<string>;

    nbNFTAddresses(): NonPayableTransactionObject<string>;

    getNFTAddress(
      index: number | string | BN
    ): NonPayableTransactionObject<string>;

    getNFTOwner(
      nftAddress: string,
      tokenId: number | string | BN
    ): NonPayableTransactionObject<string>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: number | string | BN,
      arg3: string | number[]
    ): NonPayableTransactionObject<string>;
  };
  events: {
    CollectedNFT(cb?: Callback<CollectedNFT>): EventEmitter;
    CollectedNFT(
      options?: EventOptions,
      cb?: Callback<CollectedNFT>
    ): EventEmitter;

    TransferredNFT(cb?: Callback<TransferredNFT>): EventEmitter;
    TransferredNFT(
      options?: EventOptions,
      cb?: Callback<TransferredNFT>
    ): EventEmitter;

    WithdrawnNFT(cb?: Callback<WithdrawnNFT>): EventEmitter;
    WithdrawnNFT(
      options?: EventOptions,
      cb?: Callback<WithdrawnNFT>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "CollectedNFT", cb: Callback<CollectedNFT>): void;
  once(
    event: "CollectedNFT",
    options: EventOptions,
    cb: Callback<CollectedNFT>
  ): void;

  once(event: "TransferredNFT", cb: Callback<TransferredNFT>): void;
  once(
    event: "TransferredNFT",
    options: EventOptions,
    cb: Callback<TransferredNFT>
  ): void;

  once(event: "WithdrawnNFT", cb: Callback<WithdrawnNFT>): void;
  once(
    event: "WithdrawnNFT",
    options: EventOptions,
    cb: Callback<WithdrawnNFT>
  ): void;
}
